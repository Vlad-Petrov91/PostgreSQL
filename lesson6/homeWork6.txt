1.
CREATE FUNCTION user_send_most_messages(user_id INTEGER)
RETURNS INTEGER AS
$$
    SELECT from_user_id
    FROM messages
    WHERE to_user_id = user_id
    GROUP BY from_user_id
    ORDER BY COUNT(*) DESC
    LIMIT 1;
$$
LANGUAGE SQL;

2.
CREATE OR REPLACE PROCEDURE check_owner_main_photo ()
LANGUAGE PLPGSQL AS
$$
DECLARE real_owner RECORD;
BEGIN
FOR real_owner IN
SELECT SELECT profiles.user.id
FROM profiles
JOIN photo
ON profiles.main_photo_id = photo.id
WHERE photo.owner_id != profiles.user_id
LOOP
UPDATE profiles SET main_photo_id = NULL WHERE user_id = real_owner.user_id;
END LOOP;
COMMIT;
END;
$$;

3.
CREATE OR REPLACE FUNCTION update_profiles_main_photo_trigger()
RETURNS TRIGGER AS
$$
DECLARE real_owner_id INTEGER;
BEGIN
real_owner_id := (SELECT owner_id FROM photo WHERE id = NEW.main_photo_id);
IF NEW.user_id != real_owner_id THEN
RAISE EXCEPTION 'User with ID: % Not your photo: %', NEW.user_id, NEW.main_photo_id;
END IF;
RETURN NEW;
END;
$$
LANGUAGE PLPGSQL;

DROP TRIGGER IF EXISTS check_profile_on_update ON profiles;
CREATE TRIGGER check_profile_on_update BEFORE UPDATE ON profiles
FOR EACH ROW
EXECUTE FUNCTION update_profiles_main_photo_trigger();

SELECT id FROM photo WHERE owner_id = 55;

4.
CREATE VIEW view_big_video AS
SELECT * FROM video
WHERE size > 30;

CREATE VIEW immutable_view_small_size_video AS
SELECT * FROM video
WHERE size <= 30
GROUP BY id;

UPDATE view_big_video
SET description = 'Big size video ' || description;

UPDATE immutable_view_small_size_video
SET description = 'Small size video ' || description;
